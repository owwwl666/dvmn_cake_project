import telebot
import os

from telebot import types

from dotenv import load_dotenv
import os
import sqlite3
from cake_app.models import Client, ReadyCake, Order, CustomizedCake
from dvmn_cake_project.settings import STATIC_DIR, MEDIA_ROOT

load_dotenv()
bot = telebot.TeleBot(os.environ["TG_TOKEN"])
order = {}


@bot.message_handler(commands=['start'])
def url(message):
    agreement_path = os.path.join(STATIC_DIR, '–°–æ–≥–ª–∞—Å–∏–µ.doc')
    doc = open(agreement_path, 'rb')
    bot.send_document(message.from_user.id, doc)
    markup = types.InlineKeyboardMarkup()
    btn = types.InlineKeyboardButton(callback_data='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è', text='‚úÖ')
    markup.add(btn)
    bot.send_message(message.from_user.id,
                     "–ù–∞–∂–∏–º–∞—è –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –í—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ –ü–æ–ª–∏—Ç–∏–∫–∏ –∏ –¥–∞–µ—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∞—à–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
                     reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è'))
def get_text_messages(message):
    client, _ = Client.objects.get_or_create(client_tg_id=message.from_user.id,
                                             client_tg_username=message.from_user.username)

    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton(callback_data='–ó–∞–∫–∞–∑–∞—Ç—å —Ç–æ—Ä—Ç üç∞', text='–ó–∞–∫–∞–∑–∞—Ç—å —Ç–æ—Ä—Ç üç∞')
    btn2 = types.InlineKeyboardButton(callback_data='–£–∑–Ω–∞—Ç—å —Å—Ä–æ–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ üïí', text='–£–∑–Ω–∞—Ç—å —Å—Ä–æ–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ üïí')
    # if :
    # btn4 = types.KeyboardButton('–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞')
    # btn3 = types.KeyboardButton('–ü—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–∞–∫–∞–∑—ã')
    markup.add(btn1, btn2)
    bot.send_message(message.from_user.id,
                     'üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–µ–∫–∞—Ä–Ω–∏ CakeBake. –°–æ –º–Ω–æ–π –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–±—Ä–∞—Ç—å —Å–≤–æ–π –∞–≤—Ç–æ—Ä—Å–∫–∏–π —Ç–æ—Ä—Ç, –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑, –∞ —Ç–∞–∫–∂–µ —É–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã –∏ —Å—Ä–æ–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?',
                     reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('–£–∑–Ω–∞—Ç—å —Å—Ä–æ–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ üïí'))
def find_out_delivery_time(call):
    if call.data == '–£–∑–Ω–∞—Ç—å —Å—Ä–æ–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ üïí':
        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton(callback_data='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è',
                                          text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è')
        markup.add(btn1)
        bot.send_message(call.from_user.id, '–¶–µ–Ω—Ç—Ä - 12 —á–∞—Å–æ–≤\n–í –ø—Ä–µ–¥–µ–ª–∞—Ö –ú–ö–ê–î–∞ - 1 –¥–µ–Ω—å\n–í –ø—Ä–µ–¥–µ–ª–∞—Ö –æ–±–ª–∞—Å—Ç–∏ - 2 –¥–Ω—è',
                         reply_markup=markup)
    elif call.data == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è':
        bot.edit_message_text(chat_id=call.chat.id, message_id=call.message_id, text='–≤—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                              reply_markup=get_text_messages())


@bot.callback_query_handler(func=lambda call: call.data.startswith('–ó–∞–∫–∞–∑–∞—Ç—å —Ç–æ—Ä—Ç üç∞'))
def choose_cake(call):
    readycakes = ReadyCake.objects.all()
    for readycake in readycakes.iterator():
        bot.send_photo(call.from_user.id, photo=readycake.cake_image)
        bot.send_message(call.from_user.id, f'{readycake.cake_name}\n–¶–µ–Ω–∞: {readycake.cake_price}—Ä.')
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton(callback_data='–í—ã–±—Ä–∞—Ç—å –∏–∑ —Ç–æ—Ä—Ç–æ–≤ –≤—ã—à–µ', text='–í—ã–±—Ä–∞—Ç—å –∏–∑ —Ç–æ—Ä—Ç–æ–≤ –≤—ã—à–µ')
    btn2 = types.InlineKeyboardButton(callback_data='–°–æ–±—Ä–∞—Ç—å —Å–≤–æ–π', text='–°–æ–±—Ä–∞—Ç—å —Å–≤–æ–π ')
    btn3 = types.InlineKeyboardButton(callback_data='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è', text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è')
    markup.add(btn1, btn2, btn3)
    bot.send_message(call.from_user.id, f'–ö–∞–∫–æ–π –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ? –ò–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–æ–±—Ä–∞—Ç—å —Å–≤–æ–π?', reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('–°–æ–±—Ä–∞—Ç—å —Å–≤–æ–π'))
def custom_cake(call):
    conn = sqlite3.connect('db.sqlite3')
    cur = conn.cursor()
    cur.execute(f'INSERT INTO –ó–∞–∫–∞–∑—ã (–ö–ª–∏–µ–Ω—Ç) VALUE ({call.from_user.id})')
    markup = types.InlineKeyboardMarkup()
    bot.send_photo(call.from_user.id, photo=open("media/—É—Ä–æ–≤–Ω–∏.jpg", 'rb'))
    btn1 = types.InlineKeyboardButton(callback_data=f'–§–æ—Ä–º–∞ 1 —É—Ä–æ–≤–µ–Ω—å ', text='1 —É—Ä–æ–≤–µ–Ω—å (+400 —Ä.)')
    btn2 = types.InlineKeyboardButton(callback_data=f'–§–æ—Ä–º–∞ 2 —É—Ä–æ–≤–Ω—è ', text='2 —É—Ä–æ–≤–Ω—è (+750 —Ä.)')
    btn3 = types.InlineKeyboardButton(callback_data=f'–§–æ—Ä–º–∞ 3 —É—Ä–æ–≤–Ω—è ', text='3 —É—Ä–æ–≤–Ω—è (+1100 —Ä.)')
    btn4 = types.InlineKeyboardButton(callback_data=f'–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è', text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è')
    markup.add(btn1, btn2, btn3, btn4)
    bot.send_message(call.from_user.id, '–í—ã–±–µ—Ä–µ—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–≤–Ω–µ–π —É —Ç–æ—Ä—Ç–∞', reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('–§–æ—Ä–º–∞'))
def custom_cake(message):
    global order
    if '1 —É—Ä–æ–≤–µ–Ω—å' in message.data:
        order['price'] = 400
        order['description'] = ' –í—ã —Å–æ–±—Ä–∞–ª–∏ 1-—É—Ä–æ–≤–Ω–µ–≤—ã–π —Ç–æ—Ä—Ç'
    if '2 —É—Ä–æ–≤–Ω—è' in message.data:
        order['price'] = 750
        order['description'] = ' –í—ã —Å–æ–±—Ä–∞–ª–∏ 2-—É—Ä–æ–≤–Ω–µ–≤—ã–π —Ç–æ—Ä—Ç'
    if '3 —É—Ä–æ–≤–Ω—è' in message.data:
        order['price'] = 1100
        order['description'] = ' –í—ã —Å–æ–±—Ä–∞–ª–∏ 3-—É—Ä–æ–≤–Ω–µ–≤—ã–π —Ç–æ—Ä—Ç'

    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton(callback_data=f'–í—ã–±—Ä–∞–Ω–∞ —Ñ–æ—Ä–º–∞ –∫–≤–∞–¥—Ä–∞—Ç ', text='–ö–≤–∞–¥—Ä–∞—Ç (+600 —Ä.)')
    btn2 = types.InlineKeyboardButton(callback_data=f'–í—ã–±—Ä–∞–Ω–∞ —Ñ–æ—Ä–º–∞ –∫—Ä—É–≥ ', text='–ö—Ä—É–≥ (+400 —Ä.)')
    btn3 = types.InlineKeyboardButton(callback_data=f'–í—ã–±—Ä–∞–Ω–∞ —Ñ–æ—Ä–º–∞ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ ', text='–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ (+1000 —Ä.)')
    btn4 = types.InlineKeyboardButton(callback_data='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è', text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è')
    markup.add(btn1, btn2, btn3, btn4)
    bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–µ—Ç–µ —Ñ–æ—Ä–º—É —Ç–æ—Ä—Ç–∞', reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('–í—ã–±—Ä–∞–Ω–∞ —Ñ–æ—Ä–º–∞ '))
def default_cake(message):
    '''order = ast.literal_eval(message.data.split("-")[1])'''
    global order
    if '–∫–≤–∞–¥—Ä–∞—Ç' in message.data:
        order['price'] += 600
        order['description'] = f"{order['description']} –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–π —Ñ–æ—Ä–º—ã "
    if '–∫—Ä—É–≥' in message.data:
        order['price'] += 400
        order['description'] = f"{order['description']} –∫—Ä—É–≥–ª–æ–π —Ñ–æ—Ä–º—ã "
    if '–ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫' in message.data:
        order['price'] += 1000
        order['description'] = f"{order['description']} –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–æ–π —Ñ–æ—Ä–º—ã "

    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton(callback_data=f'–í—ã–±—Ä–∞–Ω —Å–∏—Ä–æ–ø –ë–µ–∑ —Ç–æ–ø–∏–Ω–≥–∞ ', text='–ë–µ–∑ —Ç–æ–ø–∏–Ω–≥–∞ (0 —Ä.)')
    btn2 = types.InlineKeyboardButton(callback_data=f'–í—ã–±—Ä–∞–Ω —Å–∏—Ä–æ–ø –ë–µ–ª—ã–π —Å–æ—É—Å ', text='–ë–µ–ª—ã–π —Å–æ—É—Å (+200 —Ä.)')
    btn3 = types.InlineKeyboardButton(callback_data=f'–í—ã–±—Ä–∞–Ω —Å–∏—Ä–æ–ø –ö–∞—Ä–∞–º–µ–ª—å–Ω—ã–π —Å–∏—Ä–æ–ø',
                                      text='–ö–∞—Ä–∞–º–µ–ª—å–Ω—ã–π —Å–∏—Ä–æ–ø (+180 —Ä.)')
    btn4 = types.InlineKeyboardButton(callback_data=f'–í—ã–±—Ä–∞–Ω —Å–∏—Ä–æ–ø –ö–ª–µ–Ω–æ–≤—ã–π —Å–∏—Ä–æ–ø', text='–ö–ª–µ–Ω–æ–≤—ã–π —Å–∏—Ä–æ–ø (+200 —Ä.)')
    btn5 = types.InlineKeyboardButton(callback_data=f'–í—ã–±—Ä–∞–Ω —Å–∏—Ä–æ–ø –ö–ª—É–±–Ω–∏—á–Ω—ã–π —Å–∏—Ä–æ–ø', text='–ö–ª—É–±–Ω–∏—á–Ω—ã–π —Å–∏—Ä–æ–ø (+300 —Ä.)')
    btn6 = types.InlineKeyboardButton(callback_data=f'–í—ã–±—Ä–∞–Ω —Å–∏—Ä–æ–ø –ß–µ—Ä–Ω–∏—á–Ω—ã–π —Å–∏—Ä–æ–ø', text='–ß–µ—Ä–Ω–∏—á–Ω—ã–π —Å–∏—Ä–æ–ø (+350 —Ä.)')
    btn7 = types.InlineKeyboardButton(callback_data=f'–í—ã–±—Ä–∞–Ω —Å–∏—Ä–æ–ø –ú–æ–ª–æ—á–Ω—ã–π —à–æ–∫–æ–ª–∞–¥', text='–ú–æ–ª–æ—á–Ω—ã–π —à–æ–∫–æ–ª–∞–¥ (+200 —Ä.)')
    btn8 = types.InlineKeyboardButton(callback_data='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è', text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è')
    markup.add(btn1, btn2, btn3, btn4, btn5, btn6, btn7, btn8)
    bot.send_message(message.from_user.id, f'–ö–∞–∫–æ–π —Ç–æ–ø–∏–Ω–≥ –≤—ã–±–µ—Ä–µ—Ç–µ?', reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('–í—ã–±—Ä–∞–Ω —Å–∏—Ä–æ–ø'))
def default_cake(message):
    global order
    if '–ë–µ–ª—ã–π —Å–æ—É—Å' in message.data:
        order['price'] += 200
        order['description'] = f'{order["description"]} —Å –±–µ–ª—ã–º —Å–æ—É—Å–æ–º'
    if '–ö–ª–µ–Ω–æ–≤—ã–π —Å–∏—Ä–æ–ø' in message.data:
        order['price'] += 200
        order['description'] = f'{order["description"]} —Å –∫–ª–µ–Ω–æ–≤—ã–º —Å–∏—Ä–æ–ø–æ–º'
    if '–ú–æ–ª–æ—á–Ω—ã–π —à–æ–∫–æ–ª–∞–¥' in message.data:
        order['price'] += 200
        order['description'] = f'{order["description"]} —Å –º–æ–ª–æ—á–Ω—ã–º —à–æ–∫–æ–ª–∞–¥–æ–º'
    if '–ö–∞—Ä–∞–º–µ–ª—å–Ω—ã–π' in message.data:
        order['price'] += 180
        order['description'] = f'{order["description"]} —Å –∫–∞—Ä–∞–º–µ–ª—å–Ω—ã–º —Å–∏—Ä–æ–ø–æ–º'
    if '–ö–ª—É–±–Ω–∏—á–Ω—ã–π' in message.data:
        order['price'] += 300
        order['description'] = f'{order["description"]} —Å –∫–ª—É–±–Ω–∏—á–Ω—ã–º —Å–∏—Ä–æ–ø–æ–º'
    if '–ß–µ—Ä–Ω–∏—á–Ω—ã–π' in message.data:
        order['price'] += 350
        order['description'] = f'{order["description"]} —Å —á–µ—Ä–Ω–∏—á–Ω—ã–º —Å–∏—Ä–æ–ø–æ–º'
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton(callback_data=f'–í—ã–±—Ä–∞–Ω—ã —è–≥–æ–¥—ã –ï–∂–µ–≤–∏–∫–∞', text='–ï–∂–µ–≤–∏–∫–∞ (+400)')
    btn2 = types.InlineKeyboardButton(callback_data=f'–í—ã–±—Ä–∞–Ω—ã —è–≥–æ–¥—ã –ú–∞–ª–∏–Ω–∞', text='–ú–∞–ª–∏–Ω–∞ (+300)')
    btn3 = types.InlineKeyboardButton(callback_data=f'–í—ã–±—Ä–∞–Ω—ã —è–≥–æ–¥—ã –ì–æ–ª—É–±–∏–∫–∞', text='–ì–æ–ª—É–±–∏–∫–∞ (+450)')
    btn4 = types.InlineKeyboardButton(callback_data=f'–í—ã–±—Ä–∞–Ω—ã —è–≥–æ–¥—ã –ö–ª—É–±–Ω–∏–∫–∞', text='–ö–ª—É–±–Ω–∏–∫–∞ (+500)')
    btn5 = types.InlineKeyboardButton(callback_data=f'–í—ã–±—Ä–∞–Ω—ã —è–≥–æ–¥—ã –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', text='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')
    btn8 = types.InlineKeyboardButton(callback_data=f'–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è', text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è')
    markup.add(btn1, btn2, btn3, btn4, btn5, btn8)
    bot.send_message(message.from_user.id, f'–ö–∞–∫–∏–º–∏ —è–≥–æ–¥–∞–º–∏ —É–∫—Ä–∞—Å–∏—Ç—å?', reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('–í—ã–±—Ä–∞–Ω—ã —è–≥–æ–¥—ã'))
def default_cake(message):
    global order
    '''order = ast.literal_eval(message.data.split("-")[1])'''
    if '–ï–∂–µ–≤–∏–∫–∞' in message.data:
        order['price'] += 400
        order['description'] = f"{order['description']} –∏ —Å –µ–∂–µ–≤–∏–∫–æ–π."
    if '–ú–∞–ª–∏–Ω–∞' in message.data:
        order['price'] += 300
        order['description'] = f"{order['description']} –∏ —Å –º–∞–ª–∏–Ω–æ–π."
    if '–ì–æ–ª—É–±–∏–∫–∞' in message.data:
        order['price'] += 450
        order['description'] = f"{order['description']} –∏ —Å –≥–æ–ª—É–±–∏–∫–æ–π."
    if '–ö–ª—É–±–Ω–∏–∫–∞' in message.data:
        order['price'] += 500
        order['description'] = f"{order['description']} –∏ —Å –∫–ª—É–±–Ω–∏–∫–æ–π."
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton(callback_data=f'–í—ã–±—Ä–∞–Ω –¥–µ–∫–æ—Ä –§–∏—Å—Ç–∞—à–∫–∏ (+300)', text='–§–∏—Å—Ç–∞—à–∫–∏ (+300 —Ä.)')
    btn2 = types.InlineKeyboardButton(callback_data=f'–í—ã–±—Ä–∞–Ω –¥–µ–∫–æ—Ä –ë–µ–∑–µ (+400)', text='–ë–µ–∑–µ (+400 —Ä.)')
    btn3 = types.InlineKeyboardButton(callback_data=f'–í—ã–±—Ä–∞–Ω –¥–µ–∫–æ—Ä –§—É–Ω–¥—É–∫ (+350)', text='–§—É–Ω–¥—É–∫ (+350 —Ä.)')
    btn4 = types.InlineKeyboardButton(callback_data=f'–í—ã–±—Ä–∞–Ω –¥–µ–∫–æ—Ä –ü–µ–∫–∞–Ω (+300)', text='–ü–µ–∫–∞–Ω (+300 —Ä.)')
    btn5 = types.InlineKeyboardButton(callback_data=f'–í—ã–±—Ä–∞–Ω –¥–µ–∫–æ—Ä –ú–∞—Ä—à–º–µ–ª–ª–æ—É (+200)', text='–ú–∞—Ä—à–º–µ–ª–ª–æ—É (+200 —Ä.)')
    btn6 = types.InlineKeyboardButton(callback_data=f'–í—ã–±—Ä–∞–Ω –¥–µ–∫–æ—Ä –ú–∞—Ä—Ü–∏–ø–∞–Ω (+280)', text='–ú–∞—Ä—Ü–∏–ø–∞–Ω (+280 —Ä.)')
    btn7 = types.InlineKeyboardButton(callback_data=f'–í—ã–±—Ä–∞–Ω –¥–µ–∫–æ—Ä –ú–æ–ª–æ—á–Ω—ã–π —à–æ–∫–æ–ª–∞–¥', text='–ú–æ–ª–æ—á–Ω—ã–π —à–æ–∫–æ–ª–∞–¥ (+200 —Ä.)')
    btn8 = types.InlineKeyboardButton(callback_data='–í—ã–±—Ä–∞–Ω –¥–µ–∫–æ—Ä –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', text='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')
    btn9 = types.InlineKeyboardButton(callback_data='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è', text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è')
    markup.add(btn1, btn2, btn3, btn4, btn5, btn6, btn7, btn8, btn9)
    bot.send_message(message.from_user.id, f'–ö–∞–∫–æ–π –¥–µ–∫–æ—Ä –ø—Ä–µ–¥–ø–æ—á—Ç—ë—Ç–µ?', reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('–í—ã–±—Ä–∞–Ω –¥–µ–∫–æ—Ä'))
def inscription_cake(message):
    global order
    if '–§–∏—Å—Ç–∞—à–∫–∏' in message.data:
        order['price'] += 300
        order['description'] = f"{order['description']} –ö—Ä–æ–º–µ —ç—Ç–æ–≥–æ –º—ã —É–∫—Ä–∞—Å–∏–º –í–∞—à —Ç–æ—Ä—Ç —Ñ–∏—Å—Ç–∞—à–∫–∞–º–∏."
    if '–ü–µ–∫–∞–Ω' in message.data:
        order['price'] += 300
        order['description'] = f"{order['description']} –ö—Ä–æ–º–µ —ç—Ç–æ–≥–æ –º—ã —É–∫—Ä–∞—Å–∏–º –í–∞—à —Ç–æ—Ä—Ç –ø–µ–∫–∞–Ω–æ–º."
    if '–ë–µ–∑–µ' in message.data:
        order['price'] += 400
        order['description'] = f"{order['description']} –ö—Ä–æ–º–µ —ç—Ç–æ–≥–æ –º—ã —É–∫—Ä–∞—Å–∏–º –í–∞—à —Ç–æ—Ä—Ç –±–µ–∑–µ."
    if '–ú–∞—Ä—à–º–µ–ª–ª–æ—É' in message.data:
        order['price'] += 200
        order['description'] = f"{order['description']} –ö—Ä–æ–º–µ —ç—Ç–æ–≥–æ –º—ã —É–∫—Ä–∞—Å–∏–º –í–∞—à —Ç–æ—Ä—Ç –º–∞—Ä—à–º–µ–ª–ª–æ—É."
    if '–ú–æ–ª–æ—á–Ω—ã–π —à–æ–∫–æ–ª–∞–¥' in message.data:
        order['price'] += 200
        order['description'] = f"{order['description']} –ö—Ä–æ–º–µ —ç—Ç–æ–≥–æ –º—ã —É–∫—Ä–∞—Å–∏–º –í–∞—à —Ç–æ—Ä—Ç –º–æ–ª–æ—á–Ω—ã–º —à–æ–∫–æ–ª–∞–¥–æ–º."
    if '–ú–∞—Ä—Ü–∏–ø–∞–Ω' in message.data:
        order['price'] += 280
        order['description'] = f"{order['description']} –ö—Ä–æ–º–µ —ç—Ç–æ–≥–æ –º—ã —É–∫—Ä–∞—Å–∏–º –í–∞—à —Ç–æ—Ä—Ç –º–∞—Ä—Ü–∏–ø–∞–Ω–æ–º."
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton(callback_data=f'–ü–µ—Ä–µ–π—Ç–∏ –∫ –≤—ã–±–æ—Ä—É –¥–æ—Å—Ç–∞–≤–∫–∏', text='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')
    btn2 = types.InlineKeyboardButton(callback_data='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è', text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è')
    markup.add(btn1, btn2)
    message = bot.send_message(message.from_user.id,
                               '–•–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –Ω–∞–¥–ø–∏—Å—å –Ω–∞ —Ç–æ—Ä—Ç–µ?   –ú—ã –º–æ–∂–µ–º —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –Ω–∞ —Ç–æ—Ä—Ç–µ –ª—é–±—É—é –Ω–∞–¥–ø–∏—Å—å, –Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–° –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è!¬ª –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–¥–ø–∏—Å–∏',
                               reply_markup=markup)
    bot.register_next_step_handler(message, address)


@bot.callback_query_handler(func=lambda call: call.data.startswith('–í—ã–±—Ä–∞—Ç—å –∏–∑ —Ç–æ—Ä—Ç–æ–≤ –≤—ã—à–µ'))
def default_cake(message):
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton(callback_data=f'–í—ã–±—Ä–∞–Ω —Ç–æ—Ä—Ç –ù–∞–ø–æ–ª–µ–æ–Ω', text='–ù–∞–ø–æ–ª–µ–æ–Ω')
    btn2 = types.InlineKeyboardButton(callback_data=f'–í—ã–±—Ä–∞–Ω —Ç–æ—Ä—Ç –ü—Ä–∞–≥–∞', text='–ü—Ä–∞–≥–∞')
    btn3 = types.InlineKeyboardButton(callback_data=f'–í—ã–±—Ä–∞–Ω —Ç–æ—Ä—Ç –ú—É—Ä–∞–≤–µ–π–Ω–∏–∫', text='–ú—É—Ä–∞–≤–µ–π–Ω–∏–∫')
    btn4 = types.InlineKeyboardButton(callback_data=f'–í—ã–±—Ä–∞–Ω —Ç–æ—Ä—Ç –¢–∏—Ä–∞–º–∏—Å—É', text='–¢–∏—Ä–∞–º–∏—Å—É')
    btn5 = types.InlineKeyboardButton(callback_data=f'–í—ã–±—Ä–∞–Ω —Ç–æ—Ä—Ç –ú–µ–¥–æ–≤–∏–∫', text='–ú–µ–¥–æ–≤–∏–∫')
    btn6 = types.InlineKeyboardButton(callback_data=f'–í—ã–±—Ä–∞–Ω —Ç–æ—Ä—Ç –ë–∏—Å–∫–≤–∏—Ç–Ω—ã–π', text='–ë–∏—Å–∫–≤–∏—Ç–Ω—ã–π')
    btn7 = types.InlineKeyboardButton(callback_data='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è', text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è')
    markup.add(btn1, btn2, btn3, btn4, btn5, btn6, btn7)
    bot.send_message(message.from_user.id, f'–ö–∞–∫–æ–π —Ç–æ—Ä—Ç –≤—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ?', reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('–í—ã–±—Ä–∞–Ω —Ç–æ—Ä—Ç '))
def inscription_cake(message):
    global order
    if '–ù–∞–ø–æ–ª–µ–æ–Ω' in message.data:
        order['price'] = 1400
        order['description'] = '–ù–∞–ø–æ–ª–µ–æ–Ω'
    if '–ü—Ä–∞–≥–∞' in message.data:
        order['price'] = 1400
        order['description'] = '–ü—Ä–∞–≥–∞'
    if '–ú—É—Ä–∞–≤–µ–π–Ω–∏–∫' in message.data:
        order['price'] = 1400
        order['description'] = '–ú—É—Ä–∞–≤–µ–π–Ω–∏–∫'
    if '–¢–∏—Ä–∞–º–∏—Å—É' in message.data:
        order['price'] = 1400
        order['description'] = '–¢–∏—Ä–∞–º–∏—Å—É'
    if '–ú–µ–¥–æ–≤–∏–∫' in message.data:
        order['price'] = 1400
        order['description'] = '–ú–µ–¥–æ–≤–∏–∫'
    if '–ë–∏—Å–∫–≤–∏—Ç–Ω—ã–π' in message.data:
        order['price'] = 1400
        order['description'] = '–ë–∏—Å–∫–≤–∏—Ç–Ω—ã–π'
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton(callback_data='–ü–µ—Ä–µ–π—Ç–∏ –∫ –≤—ã–±–æ—Ä—É –¥–æ—Å—Ç–∞–≤–∫–∏', text='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')
    btn2 = types.InlineKeyboardButton(callback_data='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è', text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è')
    markup.add(btn1, btn2)
    bot.send_message(message.from_user.id,
                     '–•–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –Ω–∞–¥–ø–∏—Å—å –Ω–∞ —Ç–æ—Ä—Ç–µ?   –ú—ã –º–æ–∂–µ–º —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –Ω–∞ —Ç–æ—Ä—Ç–µ –ª—é–±—É—é –Ω–∞–¥–ø–∏—Å—å, –Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–° –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è!¬ª –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–¥–ø–∏—Å–∏',
                     reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('–ü–µ—Ä–µ–π—Ç–∏ –∫ –≤—ã–±–æ—Ä—É –¥–æ—Å—Ç–∞–≤–∫–∏'))
def address(message):
    if message.data == "–ü–µ—Ä–µ–π—Ç–∏ –∫ –≤—ã–±–æ—Ä—É –¥–æ—Å—Ç–∞–≤–∫–∏":
        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton(callback_data=f'–∫ –∫–æ–º–º –≤ —Ü–µ–Ω—Ç—Ä–µ', text='–í–∞—à –∞–¥—Ä–µ—Å –≤ —Ü–µ–Ω—Ç—Ä–µ –≥–æ—Ä–æ–¥–∞')
        btn2 = types.InlineKeyboardButton(callback_data=f'–∫ –∫–æ–º–º –ú–ö–ê–î–∞', text='–í–∞—à –∞–¥—Ä–µ—Å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ú–ö–ê–î–∞')
        btn3 = types.InlineKeyboardButton(callback_data=f'–∫ –∫–æ–º–º –æ–±–ª', text='–í –ø—Ä–µ–¥–µ–ª–∞—Ö –æ–±–ª–∞—Å—Ç–∏')
        btn4 = types.InlineKeyboardButton(callback_data=f'–∫ –∫–æ–º–º —Å–∞–º–æ–≤—ã–≤–æ–∑', text='–°–∞–º–æ–≤—ã–≤–æ–∑')
        btn5 = types.InlineKeyboardButton(callback_data=f'–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è',
                                          text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è')
        markup.add(btn1, btn2, btn3, btn4, btn5)
        bot.send_message(message.from_user.id,
                         f'–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏\n–°–∞–º–æ–≤—ã–≤–æ–∑ –≤–æ–∑–º–æ–∂–µ–Ω —Å –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è —Å 9:00 –¥–æ 17:00.',
                         reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('–∫ –∫–æ–º–º'))
def address(message):
    global order
    if '–≤ —Ü–µ–Ω—Ç—Ä–µ' in message.data or '–ú–ö–ê–î–∞' in message.data:
        order['delivery'] = '–∑–∞–≤—Ç—Ä–∞'
    if '–æ–±–ª' in message.data:
        order['delivery'] = '–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞'
    if '—Å–∞–º–æ–≤—ã–≤–æ–∑' in message.data:
        order['delivery'] = '—Å–∞–º–æ–≤—ã–≤–æ–∑'
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton(callback_data=f'–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞', text='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')
    btn2 = types.InlineKeyboardButton(callback_data='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è', text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è')
    markup.add(btn1, btn2)
    bot.send_message(message.from_user.id, f'–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É', reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞'))
def address(message):
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton(callback_data='–£–∑–Ω–∞—Ç—å –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏', text='–£–∑–Ω–∞—Ç—å –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏')
    btn2 = types.InlineKeyboardButton(callback_data='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è', text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è')
    markup.add(btn1, btn2)
    bot.send_message(message.from_user.id,
                     f"–í–∞—à –∑–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.\n–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞: {order['description']}\n–¶–µ–Ω–∞: {order['price']} —Ä.",
                     reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('–£–∑–Ω–∞—Ç—å –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏'))
def address(message):
    markup = types.InlineKeyboardMarkup()
    btn2 = types.InlineKeyboardButton(callback_data='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è', text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è')
    markup.add(btn2)
    if order['delivery'] == "—Å–∞–º–æ–≤—ã–≤–æ–∑":
        bot.send_message(message.from_user.id, f"–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–±—Ä–∞—Ç—å –∑–∞–∫–∞–∑ –∑–∞–≤—Ç—Ä–∞ c 9:00 –¥–æ 17:00.", reply_markup=markup)

    bot.send_message(message.from_user.id, f"–¢–æ—Ä—Ç –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω {order['delivery']} c 9:00 –¥–æ 17:00.",
                     reply_markup=markup)


def run_bot():
    bot.polling(none_stop=True, interval=0)


if __name__ == '__main__':
    run_bot()
